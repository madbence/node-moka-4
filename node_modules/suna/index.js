var http = require('http');
var fs = require('fs');
var url = require('url');
var crypto = require('crypto');

var server = http.createServer(function(req, res) {
	var m = req.url.match(/^\/([0-9a-z]{40}\.(jpg|png|gif))$/);
	if(!m) {
		res.writeHead(418, {
			'Content-Type': 'text/plain'
		});
		return res.end('418 - I\'m a teapot');
	}
	fs.readFile(__dirname + '/sunak' + req.url, function(err, data) {
		if(err) {
			res.writeHead(404, {
				'Content-Type': 'text/plain'
			});
			return res.end('404 - Az akkuntkrokodil megette az adatot!');
		}
		res.writeHead(200, {
			'Content-Type': 'image/' + m[2]
		});
		res.end(data);
	});
}).listen(80);

module.exports = function(client) {
	client.on('message', function(s, t, m) {
		if(m.match(/^sunat\s*/)) {
			client.db.upsert('suna', {
				nick: s
			}, {
				$inc: {
					query: 1
				}
			}, {
				nick: s,
				query: 1,
				up: 0
			}, function(err) {
				if(err) console.log(err);
			});
			fs.readdir(__dirname + '/sunak', function(err, files) {
				if(err) {
					return client.warn('suna', err.toString());
				}
				var choice = files[Math.floor(Math.random() * files.length)];
				client.reply(s, t, 'http://80.99.182.120/' + choice);
			})
		}
		if(m = m.match(/^sunaznam (.*?)$/)) {
			var suna = m[1];
			var sunaURL = url.parse(suna);
			var hash = crypto.createHash('sha1').update(suna).digest('hex');
			var ext = suna.match(/\.(jpg|png|gif)$/)[1];
			fs.readdir(__dirname + '/sunak', function(err, files) {
				if(err) {
					return client.warn('suna', err.toString());
				}
				for(var i in files) {
					var f = files[i];
					if(f === hash + '.' + ext) return client.reply(s, t, 'Sunaduplikatum! :c');
				}
				var req = {
					host: sunaURL.hostname,
					port: sunaURL.port || 80,
					path: sunaURL.path || '/'
				};
				var start = new Date().getTime();
				http.get(req, function(res) {
					client.log('suna', 'Download started: ' + suna);
					var pos = 0;
					if(parseInt(res.headers['content-length']) > 10 * 1024 * 1024) {
						return client.reply(s, t, 'Gooby pls, ez túl nagy falat!');
					}
					var buf = new Buffer(parseInt(res.headers['content-length']));
					res.on('data', function(data) {
						data.copy(buf, pos);
						pos += data.length;
					});
					res.on('end', function() {
						fs.writeFile(__dirname + '/sunak/' + hash + '.' + ext, buf, function(err) {
							if(err) {
								return client.warn('suna', err.toString());
							}
							var diff = new Date().getTime() - start;
							client.log('suna', 'Download finished: ' + suna + ' (' + hash + '.' + ext + ')');
							client.reply(s, t, 'Suna ACK! (' + Math.floor(pos / 1024) + 'kB, ' + diff + 'ms)');
							client.db.upsert('suna', {
								nick: s
							}, {
								$inc: {
									up: 1
								}
							}, {
								nick: s,
								query: 0,
								up: 1
							}, function(err) {
								if(err) console.log(err);
							});
						})
					})
				})
			})
		}
	})
	client.on('command:sunastat', function(s, t) {
		fs.readdir(__dirname + '/sunak', function(err, files) {
			if(err) {
				return client.warn('suna', err.toString());
			}
			client.reply(s, t, files.length + ' suna van jelenleg az adatbázisban!');
		})
	})
	client.on('command:sunamerleg', function(s, t) {
		client.db.find('suna', {}, function(err, res) {
			if(err) {
				return console.log(err);
			}
			res.sort(function(a, b) {
				return b.up - a.up;
			});
			var i = 0;
			var disp = function() {
					if(!res[i]) {
						return;
					}
					var prop = res[i].up / res[i].query;
					client.sreply(s, t, res[i].nick + ' ' + res[i].up + ' sunát adott (' + res[i].query + ' sunát kért, mérlege ' + prop.toFixed(2) + ')');
					i++;
					setTimeout(disp, 1000);
				}
			disp();
		})
	})
}